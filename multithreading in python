import requests
import threading
import time
import concurrent.futures


thread_local = threading.local()


def get_session():
    if not hasattr(thread_local, "session"):
        thread_local.session = requests.Session()
    return thread_local.session


def download_site(url):
    filename='2.jpg'
    print(filename)
    files = {'file': open(filename, 'rb')}
    session = get_session()
    with session.post(url,files=files) as response:
        a=(response.json())
        print(a)
        #print(f"Read {len(response.content)} from {url}")


def download_all_sites(sites):
    with concurrent.futures.ThreadPoolExecutor(max_workers=116) as executor:
        executor.map(download_site, sites)


if __name__ == "__main__":
    sites = [
       
#         "http://olympus.realpython.org/dice",
    ] * 1000
    start_time = time.time()
    download_all_sites(sites)
    duration = time.time() - start_time
    print(f"Downloaded {len(sites)} in {duration} seconds")
    
    
